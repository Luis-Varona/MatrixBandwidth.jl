# Copyright 2025 Luis M. B. Varona
#
# Licensed under the MIT license <LICENSE or
# http://opensource.org/licenses/MIT>. This file may not be copied, modified, or
# distributed except according to those terms.

"""
    ReadmeExample

Unit test to ensure that the example code blocks in `README.md` and `docs/src/index.md`
(which corresponds to the homepage of the Documenter.jl-generated documentation) align with
the actual output of the package on 64-bit architectures. (The exact orderings generated on
32-bit architectures may differ, although as verified by many other unit tests, they still
produce valid results.)

Instead of testing that the REPL display output is the same, we instead test that all the
`AbstractResult` fields (including the orderings that produced the sparse matrices shown in
the example blocks when the code was first run) match.
"""
module ReadmeExample

using MatrixBandwidth
using Random
using SparseArrays
using Test

# We avoid wrapping these long lines by turning off formatting
#! format: off
const EXAMPLE_MATRIX_A = sparse([52, 35, 36, 10, 26, 52, 30, 49, 9, 22, 49, 9, 26, 52, 27, 30, 5, 7, 3, 12, 15, 10, 36, 29, 30, 31, 50, 51, 10, 35, 42, 18, 36, 49, 6, 27, 53, 55, 37, 3, 7, 46, 8, 23, 34, 13, 55, 4, 8, 13, 54, 13, 28, 49, 2, 16, 2, 12, 18, 25, 54, 42, 17, 41, 48, 60, 48, 49, 26, 57, 43, 44, 4, 6, 21, 34, 45, 13, 13, 1, 3, 7, 23, 30, 38, 24, 29, 59, 47, 59, 56, 57, 43], [1, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9, 10, 10, 10, 12, 12, 13, 13, 13, 13, 13, 15, 16, 17, 18, 18, 21, 22, 23, 23, 24, 25, 26, 26, 26, 27, 27, 28, 29, 29, 30, 30, 30, 30, 31, 34, 34, 35, 35, 36, 36, 36, 37, 38, 41, 42, 42, 43, 43, 44, 45, 46, 47, 48, 48, 49, 49, 49, 49, 49, 50, 51, 52, 52, 52, 53, 54, 54, 55, 55, 56, 57, 57, 59, 59, 60], [0.24576738978057033, 0.9815652517640157, 0.037958122629155766, 0.676385808781116, 0.22478555599426664, 0.7573202446419934, 0.23688023076089482, 0.783637414278683, 0.8919509435876607, 0.3639787152009696, 0.11048593562719855, 0.9718860273776642, 0.1517761364629282, 0.4789284822576675, 0.27648464173344767, 0.8913857951102127, 0.8919509435876607, 0.9718860273776642, 0.676385808781116, 0.659803854423641, 0.8659788467336631, 0.659803854423641, 0.9331834434144175, 0.6686777203645599, 0.11165753599399597, 0.07395734815915611, 0.17159724883213667, 0.0633887493611911, 0.8659788467336631, 0.9936028846837545, 0.7294297925493887, 0.9173898474530946, 0.766493941664756, 0.6903237814160842, 0.3639787152009696, 0.43860615108882994, 0.7382944526610568, 0.7593643104200907, 0.42712274859477894, 0.22478555599426664, 0.1517761364629282, 0.1287444670966269, 0.27648464173344767, 0.43860615108882994, 0.14482118875963856, 0.6686777203645599, 0.8986438837151396, 0.23688023076089482, 0.8913857951102127, 0.11165753599399597, 0.5121337290415932, 0.07395734815915611, 0.14482118875963856, 0.4126104187619364, 0.9815652517640157, 0.9936028846837545, 0.037958122629155766, 0.9331834434144175, 0.766493941664756, 0.42712274859477894, 0.009323754494044545, 0.787846735195789, 0.7294297925493887, 0.787846735195789, 0.7983969848686123, 0.7640260989200898, 0.3274855924037543, 0.003152295620610146, 0.1287444670966269, 0.6275151413943789, 0.7983969848686123, 0.3274855924037543, 0.783637414278683, 0.11048593562719855, 0.6903237814160842, 0.4126104187619364, 0.003152295620610146, 0.17159724883213667, 0.0633887493611911, 0.24576738978057033, 0.7573202446419934, 0.4789284822576675, 0.7382944526610568, 0.5121337290415932, 0.009323754494044545, 0.7593643104200907, 0.8986438837151396, 0.5864837550516693, 0.6275151413943789, 0.15826008759358057, 0.5864837550516693, 0.15826008759358057, 0.7640260989200898], 60, 60)
const RCM_MIN_ORDERING = [58, 47, 57, 59, 56, 60, 43, 48, 44, 40, 39, 33, 32, 25, 37, 20, 19, 17, 42, 41, 14, 11, 24, 28, 22, 55, 34, 6, 45, 21, 29, 51, 50, 31, 38, 49, 13, 54, 4, 30, 8, 27, 23, 53, 5, 9, 46, 7, 1, 26, 52, 3, 15, 10, 12, 18, 36, 2, 35, 16]
const RCM_MIN_BANDWIDTH = 9
const SGS_REC_ORDERING = [11, 14, 19, 20, 32, 33, 39, 40, 58, 37, 25, 42, 41, 17, 44, 48, 60, 43, 56, 57, 59, 47, 16, 15, 12, 35, 10, 36, 2, 3, 18, 26, 52, 7, 46, 1, 9, 5, 22, 28, 21, 6, 34, 49, 38, 45, 4, 54, 50, 30, 31, 13, 8, 51, 29, 27, 24, 55, 23, 53]
const DEFAULT_MIN_ORDERING = [58, 56, 59, 57, 47, 44, 48, 43, 60, 40, 39, 33, 32, 37, 25, 20, 19, 41, 42, 17, 14, 11, 24, 53, 55, 23, 29, 51, 50, 31, 27, 13, 8, 28, 30, 54, 34, 4, 38, 49, 45, 21, 6, 22, 16, 35, 2, 18, 36, 12, 15, 10, 1, 3, 52, 26, 46, 7, 9, 5]
const DEFAULT_MIN_BANDWIDTH = 5
const DEFAULT_REC_ORDERING = [5, 56, 16, 20, 35, 60, 9, 59, 19, 32, 2, 43, 7, 57, 44, 36, 48, 52, 26, 47, 12, 18, 1, 3, 46, 55, 10, 6, 45, 29, 24, 49, 15, 22, 4, 13, 21, 34, 30, 31, 51, 50, 54, 28, 8, 38, 58, 17, 37, 23, 27, 41, 11, 42, 25, 53, 14, 39, 33, 40]

const EXAMPLE_MATRIX_B = sparse([28, 21, 37, 28, 14, 32, 28, 40, 5, 27, 46, 24, 25, 30, 29, 27, 40, 31, 49, 28, 34, 9, 20, 6, 19, 18, 8, 12, 28, 45, 47, 41, 46, 12, 18, 24, 24, 27, 31, 48, 34, 11, 22, 4, 28, 28, 11, 21, 38], [1, 2, 2, 3, 4, 4, 6, 6, 7, 7, 9, 11, 11, 11, 12, 13, 14, 15, 15, 16, 18, 19, 22, 23, 23, 25, 26, 27, 28, 28, 28, 29, 30, 31, 32, 32, 34, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 49, 49], [0.876393185605534, 0.24715844104592355, 0.4454861416855832, 0.7239551666807122, 0.41458169114316124, 0.7196439942245508, 0.9233315155791898, 0.15599535329028924, 0.46684179585378194, 0.7780403600457365, 0.13063088891297736, 0.7254001142101191, 0.8373353159276221, 0.6692342264666016, 0.43058080957148426, 0.09941370405184236, 0.1487973435349188, 0.2718334602680207, 0.08202649947338236, 0.6946674985417908, 0.4104626336159991, 0.40021659283232547, 0.8450713725695748, 0.5939456682942424, 0.15252847065651431, 0.01837461054477396, 0.28224319390169506, 0.6515641332650703, 0.8949128552335366, 0.59622140694613, 0.17738395595420609, 0.8541259583675903, 0.21121866255323152, 0.295012151835794, 0.7196001115536318, 0.4745112371722009, 0.35656924983771676, 0.42587844510233686, 0.44685672274286337, 0.511313925498016, 0.7386763578592709, 0.8737747542769404, 0.662704522607724, 0.9149323739548786, 0.4743734288920173, 0.0619244616606891, 0.38392421781263575, 0.7345381303796152, 0.47145238055647365], 50, 50)
const BANDWIDTH_B = 38
const PROFILE_B = 703
#! format: on

@testset "Initial random matrix generation" begin
    Random.seed!(8675309)
    A = sprand(60, 60, 0.01)
    A = A + A'
    @test A == EXAMPLE_MATRIX_A

    Random.seed!(1234)
    B = sprand(50, 50, 0.02)
    @test B == EXAMPLE_MATRIX_B
end

@testset "Example block 1 (RCM minimization)" begin
    res_minimize = minimize_bandwidth(EXAMPLE_MATRIX_A, Minimization.ReverseCuthillMcKee())
    @test res_minimize.ordering == RCM_MIN_ORDERING
    @test res_minimize.bandwidth == RCM_MIN_BANDWIDTH
end

@testset "Example block 2 (SGS recognition)" begin
    res_recognize = has_bandwidth_k_ordering(
        EXAMPLE_MATRIX_A, 3, Recognition.SaxeGurariSudborough()
    )
    @test res_recognize.ordering == SGS_REC_ORDERING
end

@testset "Example block 3 (default minimization)" begin
    res_default = minimize_bandwidth(EXAMPLE_MATRIX_A)
    @test res_default.ordering == DEFAULT_MIN_ORDERING
    @test res_default.bandwidth == DEFAULT_MIN_BANDWIDTH
end

@testset "Example block 4 (default recognition)" begin
    res_recognize_default = has_bandwidth_k_ordering(EXAMPLE_MATRIX_A, 6)
    @test res_recognize_default.ordering == DEFAULT_REC_ORDERING
end

@testset "Example block 5 (`bandwidth` and `profile`)" begin
    @test bandwidth(EXAMPLE_MATRIX_B) == BANDWIDTH_B
    @test profile(EXAMPLE_MATRIX_B) == PROFILE_B
end

end
