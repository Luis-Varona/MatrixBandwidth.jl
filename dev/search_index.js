var documenterSearchIndex = {"docs":
[{"location":"#MatrixBandwidth","page":"Home","title":"MatrixBandwidth","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MatrixBandwidth.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#MatrixBandwidth.MatrixBandwidth","page":"Home","title":"MatrixBandwidth.MatrixBandwidth","text":"MatrixBandwidth\n\nExact, heuristic, and metaheuristic algorithms for matrix bandwidth minimization in Julia.\n\nFull documentation is available for the latest development version of this package.\n\n\n\n\n\n","category":"module"},{"location":"#MatrixBandwidth.AbstractSolver","page":"Home","title":"MatrixBandwidth.AbstractSolver","text":"AbstractSolver\n\nTODO: Write here\n\n\n\n\n\n","category":"type"},{"location":"#MatrixBandwidth.BandwidthResult","page":"Home","title":"MatrixBandwidth.BandwidthResult","text":"BandwidthResult\n\nTODO: Write here\n\n\n\n\n\n","category":"type"},{"location":"#MatrixBandwidth.NotImplementedError","page":"Home","title":"MatrixBandwidth.NotImplementedError","text":"NotImplementedError(f, arg, subtype, abstracttype)\n\nAn exception indicating that a function lacks dispatch to handle a specific argument type.\n\nSemantically, this differs from MethodError in that it connotes a developer-side failure to implement a method rather than erroneous user input. Throughout this package, it is often used to warn when an existing function with multiple dispatch on some abstract type is called on a newly created subtype for which no method has been defined.\n\nFields\n\nf::Function: the function called.\narg::Symbol: the name of the argument with the unsupported type.\nsubtype::Type: the type of the argument. May be the actual concrete type or some   intermediate supertype. (For instance, if the relevant input has concrete type A with   hierarchy A <: B <: C and the abstracttype field is C, then both A and B are   perfectly valid choices for subtype.)\nabstracttype::Type: the abstract type under which the argument is meant to fall.\n\nConstructors\n\nNotImplementedError(::Function, ::Symbol, ::Type, ::Type): constructs a new   NotImplementedError instance. Throws an error if the second type is not abstract or   the first type is not a subtype of the second.\n\n\n\n\n\n","category":"type"},{"location":"#MatrixBandwidth._sym_minimal_band_ordering-Union{Tuple{T}, Tuple{AbstractMatrix{Bool}, T}} where T<:MatrixBandwidth.AbstractSolver","page":"Home","title":"MatrixBandwidth._sym_minimal_band_ordering","text":"_sym_minimal_bandwidh_ordering(A::AbstractMatrix{Bool}, solver::AbstractSolver)\n    -> Vector{Int}\n\nTODO: Write here\n\n\n\n\n\n","category":"method"},{"location":"#MatrixBandwidth.approach-Tuple{T} where T<:MatrixBandwidth.AbstractSolver","page":"Home","title":"MatrixBandwidth.approach","text":"approach(solver::AbstractSolver) -> Symbol\n\nTODO: Write here\n\n\n\n\n\n","category":"method"},{"location":"#MatrixBandwidth.minimize_bandwidth-Union{Tuple{AbstractMatrix{T}}, Tuple{T}, Tuple{AbstractMatrix{T}, MatrixBandwidth.AbstractSolver}} where T<:Number","page":"Home","title":"MatrixBandwidth.minimize_bandwidth","text":"minimize_bandwidth(A, solver=ReverseCuthillMcKee()) -> BandwidthResult\n\nTODO: Write here\n\n\n\n\n\n","category":"method"},{"location":"#MatrixBandwidth.Exact","page":"Home","title":"MatrixBandwidth.Exact","text":"MatrixBandwidth.Exact\n\nExact solvers for matrix bandwidth minimization.\n\nThis submodule is part of the MatrixBandwidth.jl package.\n\n\n\n\n\n","category":"module"},{"location":"#MatrixBandwidth.Exact.ExactSolver","page":"Home","title":"MatrixBandwidth.Exact.ExactSolver","text":"ExactSolver <: AbstractSolver\n\nTODO: Write here\n\n\n\n\n\n","category":"type"},{"location":"#MatrixBandwidth.Exact.MBID","page":"Home","title":"MatrixBandwidth.Exact.MBID","text":"MBID <: ExactSolver <: AbstractSolver\n\nTODO: Write here\n\n\n\n\n\n","category":"type"},{"location":"#MatrixBandwidth.Exact.MBPS","page":"Home","title":"MatrixBandwidth.Exact.MBPS","text":"MBPS <: ExactSolver <: AbstractSolver\n\nTODO: Write here\n\n\n\n\n\n","category":"type"},{"location":"#MatrixBandwidth.Heuristic","page":"Home","title":"MatrixBandwidth.Heuristic","text":"MatrixBandwidth.Heuristic\n\nHeuristic solvers for matrix bandwidth minimization.\n\nThis submodule is part of the MatrixBandwidth.jl package.\n\n\n\n\n\n","category":"module"},{"location":"#MatrixBandwidth.Heuristic.CuthillMcKee","page":"Home","title":"MatrixBandwidth.Heuristic.CuthillMcKee","text":"CuthillMcKee <: HeuristicSolver <: AbstractSolver\n\nTODO: Write here\n\n\n\n\n\n","category":"type"},{"location":"#MatrixBandwidth.Heuristic.HeuristicSolver","page":"Home","title":"MatrixBandwidth.Heuristic.HeuristicSolver","text":"HeuristicSolver <: AbstractSolver\n\nTODO: Write here\n\n\n\n\n\n","category":"type"},{"location":"#MatrixBandwidth.Heuristic.ReverseCuthillMcKee","page":"Home","title":"MatrixBandwidth.Heuristic.ReverseCuthillMcKee","text":"ReverseCuthillMcKee <: HeuristicSolver <: AbstractSolver\n\nTODO: Write here\n\n\n\n\n\n","category":"type"},{"location":"#MatrixBandwidth.Heuristic._assert_valid_node_selector-Tuple{Function}","page":"Home","title":"MatrixBandwidth.Heuristic._assert_valid_node_selector","text":"_assert_valid_node_selector(selector) -> Nothing\n\nTODO: Write here\n\n\n\n\n\n","category":"method"},{"location":"#MatrixBandwidth.Heuristic._connected_components-Tuple{AbstractMatrix{Bool}}","page":"Home","title":"MatrixBandwidth.Heuristic._connected_components","text":"_connected_components(A) -> Vector{Vector{Int}}\n\nTODO: Write here\n\n\n\n\n\n","category":"method"},{"location":"#MatrixBandwidth.Heuristic._connected_cuthill_mckee_ordering-Tuple{AbstractMatrix{Bool}, Function}","page":"Home","title":"MatrixBandwidth.Heuristic._connected_cuthill_mckee_ordering","text":"_connected_cuthill_mckee_ordering(A, node_selector) -> Vector{Int}\n\nTODO: Write here\n\n\n\n\n\n","category":"method"},{"location":"#MatrixBandwidth.Heuristic.pseudo_peripheral_node-Tuple{AbstractMatrix{Bool}}","page":"Home","title":"MatrixBandwidth.Heuristic.pseudo_peripheral_node","text":"pseudo_peripheral_node(A::AbstractMatrix{Bool}) -> Int\n\nTODO: Write here\n\n\n\n\n\n","category":"method"},{"location":"#MatrixBandwidth.Metaheuristic","page":"Home","title":"MatrixBandwidth.Metaheuristic","text":"MatrixBandwidth.Metaheuristic\n\nMetaheuristic solvers for matrix bandwidth minimization.\n\nThis submodule is part of the MatrixBandwidth.jl package.\n\n\n\n\n\n","category":"module"},{"location":"#MatrixBandwidth.Metaheuristic.GRASP","page":"Home","title":"MatrixBandwidth.Metaheuristic.GRASP","text":"GRASP <: MetaheuristicSolver <: AbstractSolver\n\nTODO: Write here\n\n\n\n\n\n","category":"type"},{"location":"#MatrixBandwidth.Metaheuristic.GeneticAlgorithm","page":"Home","title":"MatrixBandwidth.Metaheuristic.GeneticAlgorithm","text":"GeneticAlgorithm <: MetaheuristicSolver <: AbstractSolver\n\nTODO: Write here\n\n\n\n\n\n","category":"type"},{"location":"#MatrixBandwidth.Metaheuristic.MetaheuristicSolver","page":"Home","title":"MatrixBandwidth.Metaheuristic.MetaheuristicSolver","text":"MetaheuristicSolver <: AbstractSolver\n\nTODO: Write here\n\n\n\n\n\n","category":"type"},{"location":"#MatrixBandwidth.Metaheuristic.SimulatedAnnealing","page":"Home","title":"MatrixBandwidth.Metaheuristic.SimulatedAnnealing","text":"SimulatedAnnealing <: MetaheuristicSolver <: AbstractSolver\n\nTODO: Write here\n\n\n\n\n\n","category":"type"}]
}
